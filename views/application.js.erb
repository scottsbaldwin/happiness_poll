function defaultState() {
    return {participants: [], votes: {}};
}

var scheme   = "<%= @scheme %>";
var pollName = '<%= @uuid %>';
var uri      = scheme + window.document.location.host + "/" + pollName;
var ws       = new WebSocket(uri);
var state    = defaultState();
var myId     = null;

var airbrake = new Airbrake.Notifier({
  projectId: "<%= @ab_project_id %>",
  projectKey: "<%= @ab_project_key %>",
});

ws.onmessage = function(message) {
  var msg = JSON.parse(message.data);
  var topic = msg.topic;
  var payload = msg.payload;
  if (topic == 'joined' || topic == 'voted' || topic == 'exit') {
      state = payload;
      updateAverages();
  } else if (topic == 'chatted') {
    logChatMessage(payload);
  } else if (topic == 'id') {
      myId = payload.id;
  }
};

function createMessage(topic, data) {
    return JSON.stringify({topic: topic, payload: data});
}

function getUserHangoutId() {
  return myId;
}

function getState() {
  return state;
}

function chat(message) {
  ws.send(createMessage('chat', {author: getUserHangoutId(), message: message, date: new Date()}));
}

function logChatMessage(payload) {
    var logClass = '.conversation-log';
    $('.conversation-list').append('<li><h4><small>' + payload.message + ' (' + formatDate(payload.date) + ')</small></h4></li>');
    $(logClass).animate({ scrollTop: $(logClass)[0].scrollHeight }, 1000);
}

function formatDate(dateStr) {
  var d = new Date(dateStr);
  var day = d.getDate();
  var mon =  d.getMonth() + 1;
  var hour = d.getHours();
  var min = d.getMinutes();
  min = min < 10 ? '0' + min : min;
  return mon + '/' + day + ' ' + hour + ':' + min;
}

function vote(score, voteType) {
  $('.' + voteType + ' .btn').removeClass('active');
  $('.' + voteType + ' .btn[value=' + score + ']').addClass('active');
  ws.send(createMessage('vote', {voter: getUserHangoutId(), vote: score, voteType: voteType}));
}

function updateAverages() {
  $.each(['happiness', 'hopefulness'], function(i, voteType) {
    var set = getVotesFromState(voteType);
    var avg = average(set);
    $('.' + voteType + ' .team-average').html(avg);
    updateParticipants(voteType);
  });
  showVoteBreakdown();
}

function getVotesFromState(voteType) {
  var state = getState();
  var set = [];
  if (state.votes[voteType]) {
    for (p in state.votes[voteType]) {
      set.push(Number(state.votes[voteType][p]-0));
    }
  }
  return set;
}

function updateParticipants(voteType) {
  var state = getState();
  var participants = state.participants;
  var nrVoting = state.votes[voteType] ? Object.keys(state.votes[voteType]).length : 0;
  $('.' + voteType + ' .nr-voting').html(nrVoting);
  $('.' + voteType + ' .nr-participants').html(participants.length);
}

function average(set) {
  var sum = 0;
  for(var i=0;i<set.length;i++) {
    sum += set[i];
  }
  var avg = 0;
  if (set.length > 0) {
    avg = sum / set.length;
  }
  return avg.toFixed(1);
}

// ------------------------------------
// Histogram chart setup
// ------------------------------------

google.load("visualization", "1", {packages:["corechart"]});
google.setOnLoadCallback(showVoteBreakdown);

function showVoteBreakdown() {
  $.each(['happiness', 'hopefulness'], function (i, voteType) {
    var state = getState();
    var scores = getVotesFromState(voteType);
    var participants = state.participants;
    if (participants.length < 2 || scores.length < 2) {
      $('.' + voteType + ' #' + voteType + '_histogram').hide();
      return;
    } else {
      $('.' + voteType + ' #' + voteType + '_histogram').show();
    }

    if (scores.length === 0) {
      // No votes for this category, so no need to create the chart.
      return;
    }

    var data = new google.visualization.DataTable();
    data.addColumn('number', 'Score');
    data.addColumn('number', 'Count');

    var scoreCounts = {};

    for (var i = 0; i < scores.length; i++) {
      var score = scores[i];
      if (scoreCounts[score] === undefined) {
        scoreCounts[score] = 1;
      } else {
        scoreCounts[score]++;
      }
    }

    var scoreValues = Object.keys(scoreCounts).map(function (score) {
      return [parseInt(score), scoreCounts[score]];
    });

    data.addRows(scoreValues);

    var options = {
      histogram: { bucketSize: 1 },
      legend: { position: 'none' },
      backgroundColor: '#333',
      width: '100%',
      hAxis: {
        textStyle: { color: '#fff' },
        gridlines: { count: -1, color: '#666' },
      },
      vAxis: {
        textStyle: { color: '#fff' },
        gridlines: { count: -1, color: '#333' },
        textPosition: 'none',
      },
      colors: ['#5bc0de', '#2a6496'],
    };

    var chart = new google.visualization.Histogram(document.getElementById(voteType + '_histogram'));
    chart.draw(data, options);
  });
}

// ------------------------------------
// Initialize
// ------------------------------------
$(document).ready(function() {
    $('.happiness .btn-group .btn').click(function() {
      vote($(this).val(), 'happiness');
    });
    $('.hopefulness .btn-group .btn').click(function() {
      vote($(this).val(), 'hopefulness');
    });
    $('.conversation .btn').click(function() {
      var comment = $('#anonymousComment');
      chat(comment.val());
      comment.val('');
    });
    $('#anonymousComment').bind('keypress',function (event){
      if (event.keyCode === 13){
        $('.conversation .btn').trigger('click');
      }
    });
});
